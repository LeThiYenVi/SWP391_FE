import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Search, Calendar, User, Eye, Tag } from 'lucide-react';
import BlogService from '../services/BlogService';
import { toast } from 'react-toastify';
import styles from './BlogPage.module.css';

const BlogPage = () => {
  const [blogPosts, setBlogPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    loadBlogPosts();
    loadCategories();
  }, [currentPage, searchQuery, selectedCategory]);

  const loadBlogPosts = async () => {
    try {
      setLoading(true);
      const response = await BlogService.getAllBlogPosts(currentPage, 9); // 9 b√†i vi·∫øt m·ªói trang
      setBlogPosts(response.content || []);
      setTotalPages(response.totalPages || 1);
    } catch (error) {
      console.error('Error loading blog posts:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i vi·∫øt');
      // Fallback data
      setBlogPosts([
        {
          id: 1,
          title: 'Nh·ªØng ƒëi·ªÅu c·∫ßn bi·∫øt v·ªÅ chu k·ª≥ kinh nguy·ªát c·ªßa ph·ª• n·ªØ',
          summary: 'Chu k·ª≥ kinh nguy·ªát l√† m·ªôt hi·ªán t∆∞·ª£ng sinh l√Ω b√¨nh th∆∞·ªùng c·ªßa c∆° th·ªÉ ph·ª• n·ªØ. Hi·ªÉu r√µ v·ªÅ chu k·ª≥ kinh nguy·ªát gi√∫p ph·ª• n·ªØ theo d√µi s·ª©c kh·ªèe sinh s·∫£n v√† ph√°t hi·ªán s·ªõm c√°c v·∫•n ƒë·ªÅ b·∫•t th∆∞·ªùng.',
          author: { name: 'Dr. V≈© Th·ªã Thu Hi·ªÅn' },
          createdAt: '2024-01-15T10:30:00',
          categories: [{ name: 'S·ª©c kh·ªèe sinh s·∫£n' }],
          views: 1250
        },
        {
          id: 2,
          title: 'H∆∞·ªõng d·∫´n c√°ch chƒÉm s√≥c s·ª©c kh·ªèe ph·ª• n·ªØ hi·ªáu qu·∫£',
          summary: 'ChƒÉm s√≥c s·ª©c kh·ªèe ph·ª• n·ªØ ƒë√≤i h·ªèi s·ª± quan t√¢m ƒë·∫∑c bi·ªát v√† ki·∫øn th·ª©c chuy√™n m√¥n. B√†i vi·∫øt n√†y s·∫Ω cung c·∫•p nh·ªØng l·ªùi khuy√™n h·ªØu √≠ch t·ª´ c√°c chuy√™n gia y t·∫ø.',
          author: { name: 'Dr. L√™ VƒÉn Minh' },
          createdAt: '2024-01-14T14:20:00',
          categories: [{ name: 'ChƒÉm s√≥c s·ª©c kh·ªèe' }],
          views: 980
        },
        {
          id: 3,
          title: 'T·∫ßm quan tr·ªçng c·ªßa vi·ªác x√©t nghi·ªám STI ƒë·ªãnh k·ª≥',
          summary: 'X√©t nghi·ªám STI ƒë·ªãnh k·ª≥ l√† m·ªôt ph·∫ßn quan tr·ªçng trong vi·ªác b·∫£o v·ªá s·ª©c kh·ªèe. Vi·ªác ph√°t hi·ªán s·ªõm v√† ƒëi·ªÅu tr·ªã k·ªãp th·ªùi c√≥ th·ªÉ ngƒÉn ng·ª´a c√°c bi·∫øn ch·ª©ng nghi√™m tr·ªçng.',
          author: { name: 'Dr. ƒê·ªó Ph·∫°m Nguy·ªát Thanh' },
          createdAt: '2024-01-13T09:15:00',
          categories: [{ name: 'STIs' }],
          views: 756
        }
      ]);
    } finally {
      setLoading(false);
    }
  };

  const loadCategories = async () => {
    try {
      const response = await BlogService.getBlogCategories();
      setCategories(response || []);
    } catch (error) {
      console.error('Error loading categories:', error);
      setCategories([
        { id: 1, name: 'S·ª©c kh·ªèe sinh s·∫£n' },
        { id: 2, name: 'ChƒÉm s√≥c s·ª©c kh·ªèe' },
        { id: 3, name: 'STIs' },
        { id: 4, name: 'T∆∞ v·∫•n t√¢m l√Ω' }
      ]);
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const handleSearch = (e) => {
    e.preventDefault();
    setCurrentPage(1);
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const filteredPosts = blogPosts.filter(post => {
    const matchesSearch = post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         post.summary.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || 
                           post.categories?.some(cat => cat.name === selectedCategory);
    return matchesSearch && matchesCategory;
  });

  return (
    <div className={styles.blogPage}>
      <div className={styles.container}>
        {/* Header */}
        <div className={styles.header}>
          <h1>Blog - C·∫≠p nh·∫≠t tri th·ª©c</h1>
          <p>Kh√°m ph√° nh·ªØng th√¥ng tin h·ªØu √≠ch v·ªÅ s·ª©c kh·ªèe ph·ª• n·ªØ v√† c√°c v·∫•n ƒë·ªÅ sinh s·∫£n</p>
        </div>

        {/* Search and Filter */}
        <div className={styles.searchFilter}>
          <form onSubmit={handleSearch} className={styles.searchForm}>
            <div className={styles.searchInput}>
              <Search size={20} />
              <input
                type="text"
                placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            <button type="submit" className={styles.searchBtn}>
              T√¨m ki·∫øm
            </button>
          </form>

          <div className={styles.categoryFilter}>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className={styles.categorySelect}
            >
              <option value="all">T·∫•t c·∫£ danh m·ª•c</option>
              {categories.map(category => (
                <option key={category.id} value={category.name}>
                  {category.name}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* Blog Posts Grid */}
        {loading ? (
          <div className={styles.loading}>
            <div className={styles.spinner}></div>
            <p>ƒêang t·∫£i b√†i vi·∫øt...</p>
          </div>
        ) : filteredPosts.length === 0 ? (
          <div className={styles.noPosts}>
            <div className={styles.noPostsIcon}>üìù</div>
            <h3>Ch∆∞a c√≥ b√†i vi·∫øt n√†o</h3>
            <p>
              {searchQuery || selectedCategory !== 'all' 
                ? 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt ph√π h·ª£p v·ªõi t√¨m ki·∫øm c·ªßa b·∫°n.' 
                : 'Hi·ªán t·∫°i ch∆∞a c√≥ b√†i vi·∫øt n√†o ƒë∆∞·ª£c ƒëƒÉng t·∫£i. Vui l√≤ng quay l·∫°i sau!'}
            </p>
          </div>
        ) : (
          <>
            <div className={styles.blogGrid}>
              {filteredPosts.map((post) => (
                <Link
                  key={post.id}
                  to={`/blog/${post.id}`}
                  className={styles.blogCard}
                >
                  <div className={styles.blogImage}>
                    <div className={styles.imagePlaceholder}>
                      üìù
                    </div>
                  </div>
                  <div className={styles.blogContent}>
                    <div className={styles.blogMeta}>
                      <span className={styles.blogDate}>
                        <Calendar size={14} />
                        {formatDate(post.createdAt)}
                      </span>
                      <span className={styles.blogAuthor}>
                        <User size={14} />
                        {post.author?.name || 'Gynexa'}
                      </span>
                    </div>
                    
                    <h3 className={styles.blogTitle}>{post.title}</h3>
                    
                    <p className={styles.blogSummary}>
                      {post.summary || post.content?.substring(0, 150) + '...' || 'Kh√°m ph√° nh·ªØng th√¥ng tin h·ªØu √≠ch v·ªÅ s·ª©c kh·ªèe ph·ª• n·ªØ.'}
                    </p>
                    
                    <div className={styles.blogFooter}>
                      <div className={styles.blogCategories}>
                        {post.categories?.map((category, index) => (
                          <span key={index} className={styles.categoryTag}>
                            <Tag size={12} />
                            {category.name}
                          </span>
                        ))}
                      </div>
                      
                      <div className={styles.blogStats}>
                        <span className={styles.views}>
                          <Eye size={14} />
                          {post.views || Math.floor(Math.random() * 1000) + 100}
                        </span>
                      </div>
                    </div>
                  </div>
                </Link>
              ))}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className={styles.pagination}>
                <button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className={styles.pageBtn}
                >
                  Tr∆∞·ªõc
                </button>
                
                {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                  <button
                    key={page}
                    onClick={() => handlePageChange(page)}
                    className={`${styles.pageBtn} ${currentPage === page ? styles.active : ''}`}
                  >
                    {page}
                  </button>
                ))}
                
                <button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className={styles.pageBtn}
                >
                  Sau
                </button>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default BlogPage; 