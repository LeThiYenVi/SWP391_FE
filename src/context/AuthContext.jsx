import React, { createContext, useContext, useState, useEffect } from 'react';
import { loginAPI, registerAPI, getUserProfileAPI, logoutAPI, updateUserProfileAPI } from '../services/UsersSevices';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Ki·ªÉm tra localStorage ƒë·ªÉ duy tr√¨ session
    const savedUser = localStorage.getItem('user');
    const savedToken = localStorage.getItem('token');
    if (savedUser) {
      setUser(JSON.parse(savedUser));
    }
    if (savedToken) {
      setToken(savedToken);
    }
    setLoading(false);
  }, []);

  const login = async credentials => {
    try {
      console.log('üîê Attempting login with:', { username: credentials.username });

      const response = await loginAPI(credentials.username, credentials.password);

      if (response.data) {
        // D·ª±a v√†o c·∫•u tr√∫c response th·ª±c t·∫ø t·ª´ server
        const responseData = response.data;
        console.log('üìã Full response data:', responseData);

        // T·∫°o ƒë·ªëi t∆∞·ª£ng user t·ª´ d·ªØ li·ªáu response
        const userData = {
          username: responseData.username || credentials.username, // fallback to input username
          fullName: responseData.fullName || responseData.username || 'User',
          role: responseData.role,
          email: responseData.email
        };

        // L∆∞u token v√† user info
        setToken(responseData.accessToken);
        setUser(userData);
        localStorage.setItem('authToken', responseData.accessToken);
        localStorage.setItem('refreshToken', responseData.refreshToken);
        localStorage.setItem('user', JSON.stringify(userData));

        console.log('‚úÖ Login successful:', userData);
        return { success: true, user: userData };
      } else {
        console.error('‚ùå Login failed: Invalid response format');
        return { success: false, error: 'Ph·∫£n h·ªìi t·ª´ server kh√¥ng h·ª£p l·ªá' };
      }
    } catch (error) {
      console.error('‚ùå Login error:', error);
      const errorMessage = error.response?.data?.message || error.message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i';
      return { success: false, error: errorMessage };
    }
  };

  const register = async registerData => {
    try {
      console.log('üìù Attempting registration with:', {
        username: registerData.username,
        email: registerData.email,
        fullName: registerData.fullName
      });

      const response = await registerAPI(registerData);

      if (response && response.success !== false) {
        console.log('‚úÖ Registration successful');
        return { success: true, message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.' };
      } else {
        console.error('‚ùå Registration failed:', response);
        return { success: false, error: response.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i' };
      }
    } catch (error) {
      console.error('‚ùå Registration error:', error);
      const errorMessage = error.response?.data?.message || error.message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i';
      return { success: false, error: errorMessage };
    }
  };

  const logout = async () => {
    try {
      // G·ªçi API logout
      await logoutAPI();
      console.log('‚úÖ Logout API called successfully');
    } catch (error) {
      console.error('‚ùå Logout API error:', error);
      // Ti·∫øp t·ª•c x·ª≠ l√Ω logout ·ªü client side ngay c·∫£ khi API th·∫•t b·∫°i
    } finally {
      // X√≥a d·ªØ li·ªáu ng∆∞·ªùi d√πng kh·ªèi state v√† localStorage
      setUser(null);
      setToken(null);
      localStorage.removeItem('user');
      localStorage.removeItem('authToken');
      console.log('‚úÖ User logged out successfully');
    }
  };

  const updateUserProfile = async updatedData => {
    try {
      console.log('üìù Updating user profile with:', updatedData);

      const response = await updateUserProfileAPI(updatedData);

      if (response && response.success !== false) {
        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng trong state v√† localStorage
        const updatedUser = { ...user, ...updatedData };
        setUser(updatedUser);
        localStorage.setItem('user', JSON.stringify(updatedUser));

        console.log('‚úÖ Profile update successful');
        return { success: true, user: updatedUser };
      } else {
        console.error('‚ùå Profile update failed:', response);
        return { success: false, error: response?.message || 'C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i' };
      }
    } catch (error) {
      console.error('‚ùå Profile update error:', error);
      const errorMessage = error.response?.data?.message || error.message || 'C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i';
      return { success: false, error: errorMessage };
    }
  };

  const value = {
    user,
    token,
    login,
    logout,
    register,
    updateUserProfile,
    loading,
    isAuthenticated: !!user,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
